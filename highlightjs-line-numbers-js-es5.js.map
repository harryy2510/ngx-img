{"version":3,"sources":["webpack:///node_modules/highlightjs-line-numbers.js/src/highlightjs-line-numbers.js"],"names":["w","d","TABLE_NAME","LINE_NAME","CODE_BLOCK_NAME","NUMBERS_BLOCK_NAME","NUMBER_LINE_NAME","DATA_ATTR_NAME","BREAK_LINE_REGEXP","hljs","initLineNumbersOnLoad","lineNumbersBlock","lineNumbersValue","addStyles","console","error","isHljsLnCodeDescendant","domElt","curElt","className","indexOf","parentNode","getHljsLnTable","hljsLnDomElt","nodeName","edgeGetSelectedCodeLines","selection","selectionText","toString","tdAnchor","anchorNode","tdFocus","focusNode","firstLineNumber","parseInt","dataset","lineNumber","lastLineNumber","firstLineText","textContent","lastLineText","tmp","slice","lastIndexOf","selectedText","hljsLnTable","i","codeLineSel","format","codeLineElt","querySelector","document","addEventListener","e","window","getSelection","navigator","userAgent","clipboardData","setData","preventDefault","css","createElement","type","innerHTML","getElementsByTagName","appendChild","options","readyState","documentReady","blocks","querySelectorAll","hasOwnProperty","element","async","lineNumbersInternal","value","singleLine","firstLineIndex","duplicateMultilineNodes","addLineNumbersBlockFor","inputHtml","lines","getLines","length","trim","pop","html","l","nodes","childNodes","node","child","getLinesCount","duplicateMultilineNode","test","result","lineText","text","split","match","func","setTimeout","args","replace","m","n"],"mappings":"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","file":"highlightjs-line-numbers-js-es5.js","sourcesContent":["// jshint multistr:true\n\n(function (w, d) {\n    'use strict';\n\n    var TABLE_NAME = 'hljs-ln',\n        LINE_NAME = 'hljs-ln-line',\n        CODE_BLOCK_NAME = 'hljs-ln-code',\n        NUMBERS_BLOCK_NAME = 'hljs-ln-numbers',\n        NUMBER_LINE_NAME = 'hljs-ln-n',\n        DATA_ATTR_NAME = 'data-line-number',\n        BREAK_LINE_REGEXP = /\\r\\n|\\r|\\n/g;\n\n    if (w.hljs) {\n        w.hljs.initLineNumbersOnLoad = initLineNumbersOnLoad;\n        w.hljs.lineNumbersBlock = lineNumbersBlock;\n        w.hljs.lineNumbersValue = lineNumbersValue;\n\n        addStyles();\n    } else {\n        w.console.error('highlight.js not detected!');\n    }\n\n    function isHljsLnCodeDescendant(domElt) {\n        var curElt = domElt;\n        while (curElt) {\n            if (curElt.className && curElt.className.indexOf('hljs-ln-code') !== -1) {\n                return true;\n            }\n            curElt = curElt.parentNode;\n        }\n        return false;\n    }\n\n    function getHljsLnTable(hljsLnDomElt) {\n        var curElt = hljsLnDomElt;\n        while (curElt.nodeName !== 'TABLE') {\n            curElt = curElt.parentNode;\n        }\n        return curElt;\n    }\n\n    // Function to workaround a copy issue with Microsoft Edge.\n    // Due to hljs-ln wrapping the lines of code inside a <table> element,\n    // itself wrapped inside a <pre> element, window.getSelection().toString()\n    // does not contain any line breaks. So we need to get them back using the\n    // rendered code in the DOM as reference.\n    function edgeGetSelectedCodeLines(selection) {\n        // current selected text without line breaks\n        var selectionText = selection.toString();\n\n        // get the <td> element wrapping the first line of selected code\n        var tdAnchor = selection.anchorNode;\n        while (tdAnchor.nodeName !== 'TD') {\n            tdAnchor = tdAnchor.parentNode;\n        }\n\n        // get the <td> element wrapping the last line of selected code\n        var tdFocus = selection.focusNode;\n        while (tdFocus.nodeName !== 'TD') {\n            tdFocus = tdFocus.parentNode;\n        }\n\n        // extract line numbers\n        var firstLineNumber = parseInt(tdAnchor.dataset.lineNumber);\n        var lastLineNumber = parseInt(tdFocus.dataset.lineNumber);\n\n        // multi-lines copied case\n        if (firstLineNumber != lastLineNumber) {\n\n            var firstLineText = tdAnchor.textContent;\n            var lastLineText = tdFocus.textContent;\n\n            // if the selection was made backward, swap values\n            if (firstLineNumber > lastLineNumber) {\n                var tmp = firstLineNumber;\n                firstLineNumber = lastLineNumber;\n                lastLineNumber = tmp;\n                tmp = firstLineText;\n                firstLineText = lastLineText;\n                lastLineText = tmp;\n            }\n\n            // discard not copied characters in first line\n            while (selectionText.indexOf(firstLineText) !== 0) {\n                firstLineText = firstLineText.slice(1);\n            }\n\n            // discard not copied characters in last line\n            while (selectionText.lastIndexOf(lastLineText) === -1) {\n                lastLineText = lastLineText.slice(0, -1);\n            }\n\n            // reconstruct and return the real copied text\n            var selectedText = firstLineText;\n            var hljsLnTable = getHljsLnTable(tdAnchor);\n            for (var i = firstLineNumber + 1 ; i < lastLineNumber ; ++i) {\n                var codeLineSel = format('.{0}[{1}=\"{2}\"]', [CODE_BLOCK_NAME, DATA_ATTR_NAME, i]);\n                var codeLineElt = hljsLnTable.querySelector(codeLineSel);\n                selectedText += '\\n' + codeLineElt.textContent;\n            }\n            selectedText += '\\n' + lastLineText;\n            return selectedText;\n        // single copied line case\n        } else {\n            return selectionText;\n        }\n    }\n\n    // ensure consistent code copy/paste behavior across all browsers\n    // (see https://github.com/wcoder/highlightjs-line-numbers.js/issues/51)\n    document.addEventListener('copy', function(e) {\n        // get current selection\n        var selection = window.getSelection();\n        // override behavior when one wants to copy line of codes\n        if (isHljsLnCodeDescendant(selection.anchorNode)) {\n            var selectionText;\n            // workaround an issue with Microsoft Edge as copied line breaks\n            // are removed otherwise from the selection string\n            if (window.navigator.userAgent.indexOf(\"Edge\") !== -1) {\n                selectionText = edgeGetSelectedCodeLines(selection);\n            } else {\n                // other browsers can directly use the selection string\n                selectionText = selection.toString();\n            }\n            e.clipboardData.setData('text/plain', selectionText);\n            e.preventDefault();\n        }\n    });\n\n    function addStyles () {\n        var css = d.createElement('style');\n        css.type = 'text/css';\n        css.innerHTML = format(\n            '.{0}{border-collapse:collapse}' +\n            '.{0} td{padding:0}' +\n            '.{1}:before{content:attr({2})}',\n        [\n            TABLE_NAME,\n            NUMBER_LINE_NAME,\n            DATA_ATTR_NAME\n        ]);\n        d.getElementsByTagName('head')[0].appendChild(css);\n    }\n\n    function initLineNumbersOnLoad (options) {\n        if (d.readyState === 'interactive' || d.readyState === 'complete') {\n            documentReady(options);\n        } else {\n            w.addEventListener('DOMContentLoaded', function () {\n                documentReady(options);\n            });\n        }\n    }\n\n    function documentReady (options) {\n        try {\n            var blocks = d.querySelectorAll('code.hljs,code.nohighlight');\n\n            for (var i in blocks) {\n                if (blocks.hasOwnProperty(i)) {\n                    lineNumbersBlock(blocks[i], options);\n                }\n            }\n        } catch (e) {\n            w.console.error('LineNumbers error: ', e);\n        }\n    }\n\n    function lineNumbersBlock (element, options) {\n        if (typeof element !== 'object') return;\n\n        async(function () {\n            element.innerHTML = lineNumbersInternal(element, options);\n        });\n    }\n\n    function lineNumbersValue (value, options) {\n        if (typeof value !== 'string') return;\n\n        var element = document.createElement('code')\n        element.innerHTML = value\n\n        return lineNumbersInternal(element, options);\n    }\n\n    function lineNumbersInternal (element, options) {\n        // define options or set default\n        options = options || {\n            singleLine: false\n        };\n\n        // convert options\n        var firstLineIndex = !!options.singleLine ? 0 : 1;\n\n        duplicateMultilineNodes(element);\n\n        return addLineNumbersBlockFor(element.innerHTML, firstLineIndex);\n    }\n\n    function addLineNumbersBlockFor (inputHtml, firstLineIndex) {\n\n        var lines = getLines(inputHtml);\n\n        // if last line contains only carriage return remove it\n        if (lines[lines.length-1].trim() === '') {\n            lines.pop();\n        }\n\n        if (lines.length > firstLineIndex) {\n            var html = '';\n\n            for (var i = 0, l = lines.length; i < l; i++) {\n                html += format(\n                    '<tr>' +\n                        '<td class=\"{0} {1}\" {3}=\"{5}\">' +\n                            '<div class=\"{2}\" {3}=\"{5}\"></div>' +\n                        '</td>' +\n                        '<td class=\"{0} {4}\" {3}=\"{5}\">' +\n                            '{6}' +\n                        '</td>' +\n                    '</tr>',\n                [\n                    LINE_NAME,\n                    NUMBERS_BLOCK_NAME,\n                    NUMBER_LINE_NAME,\n                    DATA_ATTR_NAME,\n                    CODE_BLOCK_NAME,\n                    i + 1,\n                    lines[i].length > 0 ? lines[i] : ' '\n                ]);\n            }\n\n            return format('<table class=\"{0}\">{1}</table>', [ TABLE_NAME, html ]);\n        }\n\n        return inputHtml;\n    }\n\n    /**\n     * Recursive method for fix multi-line elements implementation in highlight.js\n     * Doing deep passage on child nodes.\n     * @param {HTMLElement} element\n     */\n    function duplicateMultilineNodes (element) {\n        var nodes = element.childNodes;\n        for (var node in nodes) {\n            if (nodes.hasOwnProperty(node)) {\n                var child = nodes[node];\n                if (getLinesCount(child.textContent) > 0) {\n                    if (child.childNodes.length > 0) {\n                        duplicateMultilineNodes(child);\n                    } else {\n                        duplicateMultilineNode(child.parentNode);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Method for fix multi-line elements implementation in highlight.js\n     * @param {HTMLElement} element\n     */\n    function duplicateMultilineNode (element) {\n        var className = element.className;\n\n        if ( ! /hljs-/.test(className)) return;\n\n        var lines = getLines(element.innerHTML);\n\n        for (var i = 0, result = ''; i < lines.length; i++) {\n            var lineText = lines[i].length > 0 ? lines[i] : ' ';\n            result += format('<span class=\"{0}\">{1}</span>\\n', [ className,  lineText ]);\n        }\n\n        element.innerHTML = result.trim();\n    }\n\n    function getLines (text) {\n        if (text.length === 0) return [];\n        return text.split(BREAK_LINE_REGEXP);\n    }\n\n    function getLinesCount (text) {\n        return (text.trim().match(BREAK_LINE_REGEXP) || []).length;\n    }\n\n    function async (func) {\n        w.setTimeout(func, 0);\n    }\n\n    /**\n     * {@link https://wcoder.github.io/notes/string-format-for-string-formating-in-javascript}\n     * @param {string} format\n     * @param {array} args\n     */\n    function format (format, args) {\n        return format.replace(/\\{(\\d+)\\}/g, function(m, n){\n            return args[n] ? args[n] : m;\n        });\n    }\n\n}(window, document));\n"]}